workflows:
  ios-test-sign:
    name: Minimal iOS Sign & Upload

    integrations:
      app_store_connect: "secure-link"

    environment:
      vars:
        APP_APPLE_ID: "6752566816"
        XCODE_SCHEME: "secure-link"
        XCODE_PROJECT: "secure-link.xcodeproj"
        BUNDLE_ID: "com.aesthetics.securelink"

      ios_signing:
        provisioning_profiles:
          - AppstoreProd
        certificates:
          - appstore

    scripts:
      - name: Set up code signing in project
        script: xcode-project use-profiles

- name: Compute NEXT_BUILD (>=3)
  script: |
    set -euo pipefail
    LATEST=$(app-store-connect get-latest-app-store-build-number "$APP_APPLE_ID" || echo 0)
    echo "ASC latest: ${LATEST:-0}"
    # Требуем минимум 3, т.к. в ASC уже есть 2
    if [[ -z "${LATEST:-}" || "${LATEST:-0}" -lt 2 ]]; then
      NEXT=3
    else
      NEXT=$(( LATEST + 1 ))
    fi
    echo "NEXT_BUILD=$NEXT" | tee -a "$CM_ENV"

- name: Set build number (AGV + fallback to Info.plist)
  script: |
    set -euo pipefail
    echo "Setting build to $NEXT_BUILD"
    # 1) AGV (если включен Apple Generic и Info.plist ссылается на $(CURRENT_PROJECT_VERSION))
    agvtool new-version -all "$NEXT_BUILD" || true
    agvtool what-version || true

    # 2) Fallback: перезапишем CFBundleVersion в главном Info.plist на тот же NEXT_BUILD
    if [[ -n "${XCODE_WORKSPACE:-}" ]]; then
      SETTINGS=$(xcodebuild -workspace "$XCODE_WORKSPACE" -scheme "$XCODE_SCHEME" -showBuildSettings)
    else
      SETTINGS=$(xcodebuild -project "${XCODE_PROJECT:?Set XCODE_PROJECT or XCODE_WORKSPACE}" -scheme "$XCODE_SCHEME" -showBuildSettings)
    fi
    INFO_PLIST=$(echo "$SETTINGS" | awk -F'= ' '/INFOPLIST_FILE/ {print $2; exit}')
    [[ "$INFO_PLIST" != /* ]] && INFO_PLIST="$(pwd)/$INFO_PLIST"
    echo "Main Info.plist: $INFO_PLIST"
    /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $NEXT_BUILD" "$INFO_PLIST" || \
    /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $NEXT_BUILD" "$INFO_PLIST"
    echo "Result CFBundleVersion:"
    /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$INFO_PLIST"


      - name: Clean and archive project
        script: |
          set -euo pipefail

          # Автовыбор -workspace / -project
          if [[ -n "${XCODE_WORKSPACE:-}" ]]; then
            BUILD_ARGS=(-workspace "$XCODE_WORKSPACE" -scheme "$XCODE_SCHEME")
          else
            BUILD_ARGS=(-project "${XCODE_PROJECT:?Set XCODE_PROJECT or XCODE_WORKSPACE}" -scheme "$XCODE_SCHEME")
          fi

          xcodebuild clean \
            "${BUILD_ARGS[@]}" \
            -configuration Release

          set -o pipefail && xcodebuild archive \
            "${BUILD_ARGS[@]}" \
            -sdk iphoneos \
            -configuration Release \
            -archivePath "$HOME/build/$XCODE_SCHEME.xcarchive" \
            -allowProvisioningUpdates \
          | tee "$CM_BUILD_DIR/xcodebuild.log"

          echo "Archive CFBundleVersion:"
          /usr/libexec/PlistBuddy -c "Print :ApplicationProperties:CFBundleVersion" \
            "$HOME/build/$XCODE_SCHEME.xcarchive/Info.plist" || true

      - name: Export .ipa using default settings
        script: |
          set -euo pipefail
          if [[ -n "${XCODE_WORKSPACE:-}" ]]; then
            xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" \
            | tee "$CM_BUILD_DIR/export.log"
          else
            xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME" \
            | tee "$CM_BUILD_DIR/export.log"
          fi

          echo "IPA CFBundleVersion:"
          unzip -p build/ios/ipa/*.ipa "Payload/*.app/Info.plist" | plutil -p - | grep CFBundleVersion
          unzip -p build/ios/ipa/*.ipa "Payload/*.app/Info.plist" | plutil -p - | grep CFBundleShortVersionString || true

    artifacts:
      - build/ios/ipa/*.ipa

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        submit_to_app_store: true

